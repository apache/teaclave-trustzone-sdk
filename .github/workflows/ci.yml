# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: CI
on: [push, pull_request]
defaults:
  run:
    shell: bash

jobs:
  # Cross-compile for ARM64 on an AMD64 host and run unit-tests of (optee-utee
  # and optee-teec) on AMD64 host.
  build-utee-teec:
    runs-on: ubuntu-latest
    container: yuanz0/teaclave-trustzone-sdk:ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Building
        run: |
          # Setup Rust and toolchains
          ./setup.sh
          source "$HOME/.cargo/env"
 
          # Build optee_os and optee_client for qemu_v8
          ./build_optee_libraries.sh $HOME

          # Setup environment
          export OPTEE_DIR=$HOME
          source environment

          # Run unit tests
          (cd optee-utee && SYS_BUILD_TYPE=unit_test cargo test --lib --features no_panic_handler -vv)
          (cd optee-teec && SYS_BUILD_TYPE=unit_test cargo test --lib -vv)
          (cd optee-utee-build && cargo test -vv)

          # Build Rust optee-utee and optee-teec
          (cd optee-utee && cargo build --target aarch64-unknown-linux-gnu -vv)
          (cd optee-teec && cargo build --target aarch64-unknown-linux-gnu -vv)

  # Cross-compile on AMD64 and run tests in QEMU
  #
  # Cross-compile target pairs:
  # - (arm32 host, arm32 ta)
  # - (arm32 host, arm64 ta)
  # - (arm64 host, arm32 ta)
  # - (arm64 host, arm64 ta)
  #
  # Run tests target: (arm64 host, arm64 ta)
  build-and-test-examples:
    runs-on: ubuntu-latest
    container: yuanz0/teaclave-trustzone-sdk:ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Building
        run: |
          # Setup Rust and toolchains
          ./setup.sh
          source "$HOME/.cargo/env"

          # Build optee_os and optee_client for qemu_v8
          ./build_optee_libraries.sh $HOME
          export OPTEE_DIR=$HOME

          # Build OP-TEE Rust examples for Arm 32-bit both host and TA
          export ARCH_HOST=arm
          export ARCH_TA=arm
          source environment
          make -j`nproc`

          # Build OP-TEE Rust examples for Arm 32-bit host and 64-bit TA
          export ARCH_HOST=arm
          unset ARCH_TA
          source environment
          make clean && make -j`nproc`

          # Build OP-TEE Rust examples for Arm 64-bit host and 32-bit TA
          unset ARCH_HOST
          export ARCH_TA=arm
          source environment
          make clean && make -j`nproc`

          # Build OP-TEE Rust examples for Arm 64-bit both host and TA
          unset ARCH_TA
          unset ARCH_HOST
          source environment
          make clean && make -j`nproc`
      - name: Run tests for Arm 64-bit both host and TA
        run: |
          source environment
          (cd ci && ./ci.sh)

  # Cross-compile for ARM64 on AMD64 and run tests in QEMU
  build-and-test-examples-for-64bit-std-TAs:
    runs-on: ubuntu-latest
    container: yuanz0/teaclave-trustzone-sdk:ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Building Arm 64-bit both host and TA (with STD enabled)
        run: |
          # Setup Rust and toolchains
          ./setup.sh
          source "$HOME/.cargo/env"

          # Setup std dependencies
          ./setup_std_dependencies.sh

          # Build optee_os and optee_client for qemu_v8
          ./build_optee_libraries.sh $HOME

          # Setup environment
          export OPTEE_DIR=$HOME
          export STD=y
          source environment

          # Build OP-TEE Rust examples for Arm 64-bit both host and TA
          make -j2

          # Build project
          (cd projects/web3/eth_wallet && make)
      - name: Run tests for Arm 64-bit both host and TA
        run: |
          export STD=y
          source environment
          (cd ci && ./ci.sh)

  # Cross-compile for ARM32 on AMD64 and run tests in QEMU
  build-and-test-examples-for-32bit-std-TAs:
    runs-on: ubuntu-latest
    container: yuanz0/teaclave-trustzone-sdk:ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Building Arm 64-bit both host and TA (with STD enabled)
        run: |
          # Setup Rust and toolchains
          ./setup.sh
          source "$HOME/.cargo/env"

          # Setup std dependencies
          ./setup_std_dependencies.sh

          # Build optee_os and optee_client for qemu_v8
          ./build_optee_libraries.sh $HOME

          # Setup environment
          export OPTEE_DIR=$HOME
          export ARCH_TA=arm
          export STD=y
          source environment

          # Build OP-TEE Rust examples for Arm 64-bit both host and TA
          make -j2

          # Build project
          (cd projects/web3/eth_wallet && make)
      - name: Run tests for Arm 32-bit both host and TA
        run: |
          export ARCH_TA=arm
          export STD=y
          source environment
          (cd ci && ./ci.sh)

  # Cross-compile for ARM64 on AMD64 and run tests in QEMU, use the check script
  # in OP-TEE repo.
  OPTEE-repo-build-and-run-examples-64bit-TAs:
    runs-on: ubuntu-latest
    container: yuanz0/teaclave-trustzone-sdk:ubuntu-24.04
    steps:
      - name: Remove /__t/*
        run: rm -rf /__t/*
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'incubator-teaclave-trustzone-sdk'
      - name: Checkout OP-TEE repository
        run: |
          mkdir -p ~/optee-qemuv8 && cd ~/optee-qemuv8 &&
          repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml &&
          repo sync -j4 --no-clone-bundle
      - name: Build images and run tests
        run: |
          cd ~/optee-qemuv8
          rm -rf optee_rust/ &&
          mv $GITHUB_WORKSPACE/incubator-teaclave-trustzone-sdk optee_rust/
          cd build &&
          make -j3 toolchains &&
          make -j`nproc` RUST_ENABLE=y check

  # Cross-compile for ARM32 on AMD64 and run tests in QEMU, use the check script
  # in OP-TEE repo.
  OPTEE-repo-build-and-run-examples-32bit-TAs:
    runs-on: ubuntu-latest
    container: yuanz0/teaclave-trustzone-sdk:ubuntu-24.04
    steps:
      - name: Remove /__t/*
        run: rm -rf /__t/*
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'incubator-teaclave-trustzone-sdk'
      - name: Checkout OP-TEE repository
        run: |
          mkdir -p ~/optee-qemuv8 && cd ~/optee-qemuv8 &&
          repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml &&
          repo sync -j4 --no-clone-bundle
      - name: Build images and run tests
        run: |
          cd ~/optee-qemuv8
          rm -rf optee_rust/ &&
          mv $GITHUB_WORKSPACE/incubator-teaclave-trustzone-sdk optee_rust/
          cd build &&
          make -j3 toolchains &&
          make -j`nproc` RUST_ENABLE=y COMPILE_S_USER=32 check

  # Run systest of optee_teec and build systest of optee_utee on ARM64
  systest:
    runs-on: ubuntu-24.04-arm
    container: ghcr.io/ivila/teaclave-trustzone-sdk-ci-runner:ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Environment
        run: |
          # Setup Rust and toolchains
          ./setup.sh
          source "$HOME/.cargo/env"
          # Build optee_os and optee_client for qemu_v8
          ./build_optee_libraries.sh $HOME
          # Setup environment
          export OPTEE_DIR=$HOME
          source environment
          # Run systest
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OPTEE_DIR/optee_client/export_arm64/usr/lib
          (cd optee-teec && cargo run -p systest)
          (cd optee-utee && cargo build -p systest)

  license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check License Header
        uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff
